from iProducto import iProducto
from producto import Producto
from ingrediente import Ingrediente
from base import Base
from complemento import Complemento
from copa import Copa
from malteada import Malteada
from heladeria import Heladeria

base1 = Base("Helado de Fresas",500.0,5,50,True,"B","Dulce")
base2 = Base("Crema de vainilla",400.0,10,5,True,"B","Acido")
base3 = Base("Helado Ron con pasas",700.0,520,5,False,"B","Dulce")

complemento1 = Complemento("Fresas",150.0,5,10,True,"C")
complemento2 = Complemento("Uvas",200.0,10,10,True,"C",)
complemento3 = Complemento("Mani Japones",100.0,520,10,False,"C")
complemento4 = Complemento("Crema chantilli",80.0,300,10,False,"C")
complemento5 = Complemento("Mandarinas",150.0,5,10,True,"C")

producto1 = Copa("Samurai de fresas",1200.0,base1,complemento1,complemento2,"Copa")
producto2 = Copa("Samurai de mandarinas",2000.0,base2,complemento2,complemento5,"Copa")
producto3 = Malteada("Malteda chocoespacial",3500.0,base3,complemento3,complemento4,15)
producto4 = Malteada("Cupihelado",2000.0,base2,complemento3,complemento4,15)

print(" Prueba de costo de producto y, rentabilidad")
print("")
print (f"Costo de {producto1.obtener_nombre()}: ${producto1.calcular_costo_producto()}")
print (f"Costo de {producto2.obtener_nombre()}: ${producto2.calcular_costo_producto()}")
print (f"Costo de {producto3.obtener_nombre()}: ${producto3.calcular_costo_producto()}")
print (f"Costo de {producto4.obtener_nombre()}: ${producto4.calcular_costo_producto()}")

print(" ")

menu = Heladeria(producto1,producto2,producto3,producto4,"6013406868","heladeria_jumbo@gmail.com",0.0)
print(f"Producto más rentable {menu.producto_mas_rentable()}")

print(" ")

print("     Son los Ingredientes sanos? ")
print(" ")
ingrediente_base=[base1,base2,base3]
for base in ingrediente_base:
    if base.es_sano(base.obtener_calorias(), base.obtener_es_vegetariano()):
        print(f" {base.obtener_nombre()}- Es un ingrediente sano")
    else:
        print(f" {base.obtener_nombre()}- NO es un ingrediente sano")

print(" ")

ingrediente_complemento=[complemento1, complemento2, complemento4, complemento5]
for complemento in ingrediente_complemento:
    if complemento.es_sano(complemento.obtener_calorias(), complemento.obtener_es_vegetariano()):
        print(f" {complemento.obtener_nombre()}- Es un ingrediente sano")
    else:
        print(f" {complemento.obtener_nombre()}- NO es un ingrediente sano")



def vender(nombre_producto:str):
    ingredientes=[]
    se_puede_vender = False

    if producto1.obtener_nombre() == nombre_producto:
        ingredientes =[producto1.ing1,producto1.ing2,producto1.ing3]
    if producto2.obtener_nombre() == nombre_producto:
        ingredientes =[producto2.ing1,producto2.ing2,producto2.ing3]
    if producto3.obtener_nombre() == nombre_producto:
        ingredientes =[producto3.ing1,producto3.ing2,producto3.ing3]         
    if producto4.obtener_nombre() == nombre_producto:
        ingredientes =[producto4.ing1,producto4.ing2,producto4.ing3]   

    for ingrediente in ingredientes:
        se_puede_vender = False

        existencia = ingrediente.obtener_inventario()

        if (ingrediente.tipo == "B"):  # Ingrediente 1 Base
            if (existencia >= 0.2):
                se_puede_vender = True # Se puede elaborar el producto
        else:
            if (existencia >= 1):
                se_puede_vender = True # Se puede elaborar el producto

        if not se_puede_vender:
            break

    if se_puede_vender: 
        print("   Se pudo vender " + nombre_producto)
        print(" ")
        for ingrediente in ingredientes: # Resta de cada ingrediente lo necesario para elabora el producto
            existencia = ingrediente.obtener_inventario()
            print (f"{ingrediente.obtener_nombre()} Existencia = {ingrediente.obtener_inventario()}")
            if (ingrediente.tipo == "B"):  # Ingrediente 1 Base
                existencia -= 0.2
            else:
                existencia -= 1   

            ingrediente.inventario = existencia 
            ingrediente.actualizar_inventario(existencia)  # Actualiza el inventario
            print (f"{ingrediente.obtener_nombre()} Saldo = {ingrediente.obtener_inventario()}")
            print("--")

       #  Sumar a las ventas del día el precio del producto vendido
        if producto1.obtener_nombre() == nombre_producto:
            menu.actualizar_ventas_dia(menu.obtener_ventas_dia() + producto1.obtener_precio())
        if producto2.obtener_nombre() == nombre_producto:
            menu.actualizar_ventas_dia(menu.obtener_ventas_dia() + producto2.obtener_precio())
        if producto3.obtener_nombre() == nombre_producto:
            menu.actualizar_ventas_dia(menu.obtener_ventas_dia() + producto3.obtener_precio())
        if producto4.obtener_nombre() == nombre_producto:
            menu.actualizar_ventas_dia(menu.obtener_ventas_dia() + producto4.obtener_precio())
        print (f"Ventas del día {menu.obtener_ventas_dia()}")
    print("_____________________")
    return se_puede_vender


    #Ventas 
nombre_producto = "Samurai de fresas"
if not vender(nombre_producto):
    print("No Se pudo vender " + nombre_producto)

nombre_producto = "Cupihelado"
if not vender(nombre_producto):
    print("No Se pudo vender " + nombre_producto)

nombre_producto = "Cono de chocolate"
if not vender(nombre_producto):
    print("No Se pudo vender " + nombre_producto)

print(" ")

print("     Dar de baja un complemento ")
print("")
print(f" Saldo de {complemento1.obtener_nombre()} {complemento1.obtener_inventario()}")
complemento1.dar_de_baja_inventario()  # Bajar el inventario a 0
print(f" Nuevo saldo de {complemento1.obtener_nombre()} {complemento1.obtener_inventario()}")
print("")
print(f" Saldo de {complemento2.obtener_nombre()} {complemento2.obtener_inventario()}")
complemento2.dar_de_baja_inventario()  # Bajar el inventario a 0
print(f" Nuevo saldo de {complemento2.obtener_nombre()} {complemento2.obtener_inventario()}")

print(" ")
print (" Calorias de los productos") 

productos = [producto1,producto2,producto3,producto4]
for product in productos:
    print(f"Calorias de {product.obtener_nombre()} son {product.calcular_calorias()}")